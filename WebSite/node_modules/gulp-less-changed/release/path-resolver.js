'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var fs = require('fs');
var path = require('path');
var Promise = require('bluebird');
var fsAsync = Promise.promisifyAll(fs);
var pathResolver;
(function (pathResolver) {
    var PathResolverError = (function (_super) {
        __extends(PathResolverError, _super);
        function PathResolverError(message) {
            _super.call(this, message);
            this.message = message;
            this.name = this.constructor.name;
            Error.captureStackTrace(this, this.name);
        }
        return PathResolverError;
    }(Error));
    pathResolver.PathResolverError = PathResolverError;
    var PathResolver = (function () {
        function PathResolver() {
        }
        PathResolver.prototype.resolve = function (currentDirectory, inputPath, searchPaths) {
            var pathsToTry = [path.join(currentDirectory, inputPath)];
            if (searchPaths) {
                pathsToTry.push.apply(pathsToTry, searchPaths.map(function (p) { return path.join(p, inputPath); }));
            }
            pathsToTry.push(path.join(process.cwd(), inputPath));
            return Promise.map(pathsToTry, function (path) {
                return fsAsync.statAsync(path)
                    .then(function (stat) { return Promise.resolve(path); })
                    .catch(function (error) {
                    return null;
                });
            })
                .then(function (paths) {
                var index = -1;
                var foundPath = paths.some(function (path, i) {
                    var found = path !== null;
                    if (found) {
                        index = i;
                    }
                    return found;
                }) ? paths[index] : null;
                return foundPath;
            })
                .then(function (result) {
                if (result === null) {
                    var triedPathsDisplay = pathsToTry.map(function (p) { return ("'" + p + "'"); }).join(', ');
                    return Promise.reject(new PathResolverError("Import file '" + inputPath + "' wasn't found. Tried: " + triedPathsDisplay + "."));
                }
                return result;
            });
        };
        return PathResolver;
    }());
    pathResolver.PathResolver = PathResolver;
})(pathResolver || (pathResolver = {}));
module.exports = pathResolver;

//# sourceMappingURL=path-resolver.js.map
