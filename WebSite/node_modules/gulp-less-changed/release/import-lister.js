'use strict';
var fs = require('fs');
var less = require('less');
var streamToArray = require('stream-to-array');
var Promise = require('bluebird');
var path_resolver_1 = require('./path-resolver');
var data_uri_visitor_plugin_1 = require('./data-uri-visitor-plugin');
var fsAsync = Promise.promisifyAll(fs);
var assign = require('object-assign');
var importLister;
(function (importLister) {
    var ImportLister = (function () {
        function ImportLister(lessOptions) {
            this.lessOptions = lessOptions;
            this.pathResolver = new path_resolver_1.PathResolver();
        }
        ImportLister.prototype.getLessData = function (file) {
            if (file.isBuffer()) {
                return new Promise(function (resolve, reject) {
                    process.nextTick(function () { return resolve(file.contents.toString()); });
                });
            }
            return streamToArray(file.contents)
                .then(function (parts) {
                var buffers = [];
                for (var i = 0; i < parts.length; ++i) {
                    var part = parts[i];
                    buffers.push((part instanceof Buffer) ? part : new Buffer(part));
                }
                return Buffer.concat(buffers).toString();
            });
        };
        ImportLister.prototype.listImportsInternal = function (file) {
            var _this = this;
            if (file == null || file.isNull()) {
                console.error('Trying to process imports for null file.');
                return Promise.resolve([]);
            }
            var dataUriVisitorPlugin = new data_uri_visitor_plugin_1.DataUriVisitorPlugin();
            var options = assign({ filename: file.path }, this.lessOptions);
            options.plugins = options.plugins ? [dataUriVisitorPlugin].concat(options.plugins) : [dataUriVisitorPlugin];
            return this.getLessData(file)
                .then(function (lessData) {
                return less
                    .render(lessData, options)
                    .then(function (value) {
                    return Promise.join(Promise.resolve(value.imports), (Promise.map(dataUriVisitorPlugin.imports, function (i) { return _this.pathResolver.resolve(i.directory, i.relativePath, options.paths); })));
                })
                    .then(function (_a) {
                    var fileImports = _a[0], dataUriImports = _a[1];
                    return Promise.resolve(fileImports.concat(dataUriImports));
                })
                    .catch(function (reason) {
                    var error = "Failed to process imports for '" + file.path + "': " + reason;
                    console.error(error);
                    return Promise.reject(new Error(error));
                });
            });
        };
        ImportLister.prototype.listImports = function (file) {
            if (!file) {
                return Promise.resolve([]);
            }
            return this.listImportsInternal(file)
                .then(function (files) {
                return Promise.map(files, function (file) {
                    return fsAsync.statAsync(file)
                        .catch(Error, function (error) {
                        if (error.code === 'ENOENT') {
                            console.error("Import '" + file + "' not found.");
                            return Promise.resolve(null);
                        }
                        return Promise.reject(error);
                    })
                        .then(function (stat) { return { path: file, stat: stat }; });
                });
            })
                .then(function (results) {
                var successfulResults = results.filter(function (info) { return !!info.stat; });
                successfulResults = successfulResults.map(function (i) { return { path: i.path, time: i.stat.mtime.getTime() }; });
                return Promise.resolve(successfulResults);
            });
        };
        return ImportLister;
    }());
    importLister.ImportLister = ImportLister;
})(importLister || (importLister = {}));
module.exports = importLister;

//# sourceMappingURL=import-lister.js.map
