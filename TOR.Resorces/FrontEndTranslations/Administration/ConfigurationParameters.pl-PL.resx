<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="boolValue" xml:space="preserve">
    <value>Flaga</value>
  </data>
  <data name="code" xml:space="preserve">
    <value>Kod</value>
  </data>
  <data name="configurationParametersList" xml:space="preserve">
    <value>Lista parametrów konfiguracyjnych</value>
  </data>
  <data name="decimalValue" xml:space="preserve">
    <value>Czas/wartość </value>
  </data>
  <data name="description" xml:space="preserve">
    <value>Opis</value>
  </data>
  <data name="parameterName" xml:space="preserve">
    <value>Nazwa prarametru</value>
  </data>
  <data name="parameterType" xml:space="preserve">
    <value>Typ parametru</value>
  </data>
  <data name="selectedValue" xml:space="preserve">
    <value>Wybrane wartość</value>
  </data>
  <data name="ForceCloseMachineActivity" xml:space="preserve">
    <value>Automatyczne zamknięcie aktywności podczas otwierania kolejnej</value>
  </data>
  <data name="ParallelEmpActivityNotAllowed" xml:space="preserve">
    <value>Możliwość pracy równoległej</value>
  </data>
  <data name="RegisteringQtyInTerminalIsAllowed" xml:space="preserve">
    <value>Rejestracja ilości w terminalu</value>
  </data>
  <data name="TerminalCloseAllMachineActivity" xml:space="preserve">
    <value>Tryb zamknięcia wszystkich aktywności na maszynie</value>
  </data>
  <data name="TerminalBrigadeButtonIsAvailable" xml:space="preserve">
    <value>Dostępność przycisku brygady w terminalu </value>
  </data>
  <data name="TerminalBreakButtonIsAvailable" xml:space="preserve">
    <value>Dostępność przycisku przerwa w terminalu</value>
  </data>
  <data name="TerminalNonProductiveButtonIsAvailable" xml:space="preserve">
    <value>Dostępność przycisku prac nieprodukcyjnych w terminalu</value>
  </data>
  <data name="PortalMassOperationStatusChange" xml:space="preserve">
    <value>Zmiana statusów wszystkich operacji dla wszystkich pracowników przeprowadzających tą operację</value>
  </data>
  <data name="PortalMassStatusChangeQtyAdjustment" xml:space="preserve">
    <value>Zaktualizowanie ilości wykonanych dla operacji w kartotece "Lista otwartych aktywności"</value>
  </data>
  <data name="PortalMassQtyExceedAllowable" xml:space="preserve">
    <value>Brak możliwości raportowania ujemnej ilości produkcji w panelu administracyjnym </value>
  </data>
  <data name="TerminalOrderOperationScanChange" xml:space="preserve">
    <value>Wybór ilości zleceń po zeskanowaniu kodu</value>
  </data>
  <data name="TerminalWorkActivityChoice" xml:space="preserve">
    <value>Definiuje zachowanie terminala po rozpoczęciu nowej aktywności</value>
  </data>
  <data name="TerminalEndWorkFrozenTime" xml:space="preserve">
    <value>Blokady możliwości logowania po ukończeniu pracy </value>
  </data>
  <data name="TerminalBarCodeSeparator" xml:space="preserve">
    <value>Znak separujący w kodzie kreskowym</value>
  </data>
  <data name="PortalPermissionToChangeDate" xml:space="preserve">
    <value>Możliwość zmiany daty dla zamykania operacji/dodawania ilości </value>
  </data>
  <data name="TerminalCloseActivityButtonIsAvailable" xml:space="preserve">
    <value>Dostępność przycisku zakończenia pracy w terminalu</value>
  </data>
  <data name="TerminalShiftDelta" xml:space="preserve">
    <value>Możliwość wyboru zmiany podczas logowania w terminalu </value>
  </data>
  <data name="TerminalMaxShiftTime" xml:space="preserve">
    <value>Ograniczenie maksymalnego czasu zmiany pracowniczej (ustawienie na zero wyłącza ograniczenie)</value>
  </data>
  <data name="TerminalMaxShiftTimeCloseMode" xml:space="preserve">
    <value>Tryb zamknięcia zmiany pracowniczej po przekroczeniu maksymalnego przyznanego czasu zmiany </value>
  </data>
  <data name="TerminalCloseAllMachineActivity1" xml:space="preserve">
    <value>Brak możliwości zamknięcia aktywności przyciskiem zakończ pracę</value>
  </data>
  <data name="TerminalCloseAllMachineActivity2" xml:space="preserve">
    <value>Zamknięcie aktywności bez pytania</value>
  </data>
  <data name="TerminalCloseAllMachineActivity3" xml:space="preserve">
    <value>Zamknięcie aktywności prosząc o potwierdzenie</value>
  </data>
  <data name="yes" xml:space="preserve">
    <value>Tak</value>
  </data>
  <data name="no" xml:space="preserve">
    <value>Nie</value>
  </data>
  <data name="configurationParameter" xml:space="preserve">
    <value>Parametr konfiguracyjny </value>
  </data>
  <data name="text" xml:space="preserve">
    <value>Tekst</value>
  </data>
  <data name="TerminalIdleTimout" xml:space="preserve">
    <value>Automatyczne wylogowanie pracownika po braku aktywności</value>
  </data>
  <data name="PortalMassWOStatusChange" xml:space="preserve">
    <value>W przypadku wyboru statusu dla wszystkich zleceń z kartoteki status się zaktualizuje </value>
  </data>
  <data name="TerminalWorkActivityChoice1" xml:space="preserve">
    <value>Po rozpoczęciu aktywności powraca do ekranu listy</value>
  </data>
  <data name="TerminalWorkActivityChoice2" xml:space="preserve">
    <value>Po rozpoczęciu aktywności wyloguje pracownika</value>
  </data>
  <data name="TerminalWorkActivityChoice3" xml:space="preserve">
    <value>Po rozpoczęciu aktywności wyświetli się ramka aktywności, następnie powróci do listy  </value>
  </data>
  <data name="TerminalWorkActivityChoice4" xml:space="preserve">
    <value>Po rozpoczęciu aktywności wyświetli się ramka z potwierdzeniem zapisu, następnie pracownik zostanie wylogowany</value>
  </data>
  <data name="TerminalMaxShiftTimeCloseMode0" xml:space="preserve">
    <value>Pracownik musi zakończyć ręcznie, nie ma możliwości rozpoczęcia kolejnych aktywności na tej zmianie</value>
  </data>
  <data name="TerminalMaxShiftTimeCloseMode1" xml:space="preserve">
    <value>Automatycznie kończy zmianę zgodnie z aktualnym czasem</value>
  </data>
  <data name="textValue" xml:space="preserve">
    <value>Wartość teksowa</value>
  </data>
  <data name="false" xml:space="preserve">
    <value>Nie</value>
  </data>
  <data name="true" xml:space="preserve">
    <value>Tak</value>
  </data>
  <data name="TerminalOrderOperationScanChange1" xml:space="preserve">
    <value>Wiele zleceń</value>
  </data>
  <data name="TerminalOrderOperationScanChange2" xml:space="preserve">
    <value>Jedno zlecenie</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Nazwa</value>
  </data>
  <data name="TerminalPrintLabel" xml:space="preserve">
    <value>Dostępność przycisku drukowania etykiet w Terminalu</value>
  </data>
  <data name="PortalMachineMappingToExternalCode" xml:space="preserve">
    <value>Mapowanie zewnętrznego kodu</value>
  </data>
  <data name="PortalMachineMappingToExternalCode0" xml:space="preserve">
    <value>Nie</value>
  </data>
  <data name="PortalMachineMappingToExternalCode1" xml:space="preserve">
    <value>Tak</value>
  </data>
</root>